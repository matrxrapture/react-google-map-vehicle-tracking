{"ast":null,"code":"var _jsxFileName = \"/home/elton/react-google-map-vehicle-tracking/src/components/gMap/Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { GoogleMap, withScriptjs, withGoogleMap, Marker, Polyline } from 'react-google-maps';\nimport Button from '@mui/material/Button';\nimport Card from '@mui/material/Card';\nimport '../../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Map = _ref => {\n  _s();\n\n  let {\n    paths,\n    stops\n  } = _ref;\n  const [progress, setProgress] = useState(null);\n  const velocity = 27; // 100km per hour\n\n  let initialDate;\n  let interval = null;\n  const icon1 = {\n    url: \"https://images.vexels.com/media/users/3/154573/isolated/preview/bd08e000a449288c914d851cb9dae110-hatchback-car-top-view-silhouette-by-vexels.png\",\n    scaledSize: new window.google.maps.Size(40, 40),\n    anchor: new window.google.maps.Point(20, 20),\n    scale: 0.7\n  };\n  const center = parseInt(paths.length / 2);\n  const centerPathLat = paths[center].lat;\n  const centerpathLng = paths[center + 5].lng;\n  useEffect(() => {\n    calculatePath();\n    return () => {\n      console.log(\"CLEAR........\");\n      interval && window.clearInterval(interval);\n    };\n  }, [paths]);\n\n  const getDistance = () => {\n    // seconds between when the component loaded and now\n    const differentInTime = (new Date() - initialDate) / 1000; // pass to seconds\n\n    return differentInTime * velocity; // d = v*t -- thanks Newton!\n  };\n\n  const moveObject = () => {\n    const distance = getDistance();\n\n    if (!distance) {\n      return;\n    }\n\n    let progress = paths.filter(coordinates => coordinates.distance < distance);\n    const nextLine = paths.find(coordinates => coordinates.distance > distance);\n\n    if (!nextLine) {\n      setProgress(progress);\n      window.clearInterval(interval);\n      console.log(\"Trip Completed!! Thank You !!\");\n      return; // it's the end!\n    }\n\n    const lastLine = progress[progress.length - 1];\n    const lastLineLatLng = new window.google.maps.LatLng(lastLine.lat, lastLine.lng);\n    const nextLineLatLng = new window.google.maps.LatLng(nextLine.lat, nextLine.lng); // distance of this line\n\n    const totalDistance = nextLine.distance - lastLine.distance;\n    const percentage = (distance - lastLine.distance) / totalDistance;\n    const position = window.google.maps.geometry.spherical.interpolate(lastLineLatLng, nextLineLatLng, percentage);\n    mapUpdate();\n    setProgress(progress.concat(position));\n  };\n\n  const calculatePath = () => {\n    paths = paths.map((coordinates, i, array) => {\n      if (i === 0) {\n        return { ...coordinates,\n          distance: 0\n        }; // it begins here!\n      }\n\n      const {\n        lat: lat1,\n        lng: lng1\n      } = coordinates;\n      const latLong1 = new window.google.maps.LatLng(lat1, lng1);\n      const {\n        lat: lat2,\n        lng: lng2\n      } = array[0];\n      const latLong2 = new window.google.maps.LatLng(lat2, lng2); // in meters:\n\n      const distance = window.google.maps.geometry.spherical.computeDistanceBetween(latLong1, latLong2);\n      return { ...coordinates,\n        distance\n      };\n    });\n  };\n\n  const startSimulation = useCallback(() => {\n    if (interval) {\n      window.clearInterval(interval);\n    }\n\n    setProgress(null);\n    initialDate = new Date();\n    interval = window.setInterval(moveObject, 1000);\n  }, [interval, initialDate]);\n\n  const mapUpdate = () => {\n    const distance = getDistance();\n\n    if (!distance) {\n      return;\n    }\n\n    let progress = paths.filter(coordinates => coordinates.distance < distance);\n    const nextLine = paths.find(coordinates => coordinates.distance > distance);\n    let point1, point2;\n\n    if (nextLine) {\n      point1 = progress[progress.length - 1];\n      point2 = nextLine;\n    } else {\n      // it's the end, so use the latest 2\n      point1 = progress[progress.length - 2];\n      point2 = progress[progress.length - 1];\n    }\n\n    const point1LatLng = new window.google.maps.LatLng(point1.lat, point1.lng);\n    const point2LatLng = new window.google.maps.LatLng(point2.lat, point2.lng);\n    const angle = window.google.maps.geometry.spherical.computeHeading(point1LatLng, point2LatLng);\n    const actualAngle = angle - 90;\n    const marker = document.querySelector(`[src=\"${icon1.url}\"]`);\n\n    if (marker) {\n      // when it hasn't loaded, it's null\n      marker.style.transform = `rotate(${actualAngle}deg)`;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    variant: \"outlined\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btnCont\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: startSimulation,\n        children: \"Start Simulation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gMapCont\",\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        defaultZoom: 17,\n        defaultCenter: {\n          lat: centerPathLat,\n          lng: centerpathLng\n        },\n        children: [/*#__PURE__*/_jsxDEV(Polyline, {\n          path: paths,\n          options: {\n            strokeColor: \"#0088FF\",\n            strokeWeight: 6,\n            strokeOpacity: 0.6,\n            defaultVisible: true\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this), stops.data.map((stop, index) => /*#__PURE__*/_jsxDEV(Marker, {\n          position: {\n            lat: stop.lat,\n            lng: stop.lng\n          },\n          title: stop.id,\n          label: `${index + 1}`\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 17\n        }, this)), progress && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Polyline, {\n            path: progress,\n            options: {\n              strokeColor: \"orange\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Marker, {\n            icon: icon1,\n            position: progress[progress.length - 1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Map, \"AcQYrD4NNDbgonrF0QOR1dvmkic=\");\n\n_c = Map;\nexport default _c3 = withScriptjs(_c2 = withGoogleMap(Map));\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Map\");\n$RefreshReg$(_c2, \"%default%$withScriptjs\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"sources":["/home/elton/react-google-map-vehicle-tracking/src/components/gMap/Map.js"],"names":["React","useEffect","useState","useCallback","GoogleMap","withScriptjs","withGoogleMap","Marker","Polyline","Button","Card","Map","paths","stops","progress","setProgress","velocity","initialDate","interval","icon1","url","scaledSize","window","google","maps","Size","anchor","Point","scale","center","parseInt","length","centerPathLat","lat","centerpathLng","lng","calculatePath","console","log","clearInterval","getDistance","differentInTime","Date","moveObject","distance","filter","coordinates","nextLine","find","lastLine","lastLineLatLng","LatLng","nextLineLatLng","totalDistance","percentage","position","geometry","spherical","interpolate","mapUpdate","concat","map","i","array","lat1","lng1","latLong1","lat2","lng2","latLong2","computeDistanceBetween","startSimulation","setInterval","point1","point2","point1LatLng","point2LatLng","angle","computeHeading","actualAngle","marker","document","querySelector","style","transform","strokeColor","strokeWeight","strokeOpacity","defaultVisible","data","stop","index","id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport {\n  GoogleMap,\n  withScriptjs,\n  withGoogleMap,\n  Marker,\n  Polyline\n} from 'react-google-maps';\nimport Button from '@mui/material/Button';\nimport Card from '@mui/material/Card';\nimport '../../App.css';\n\nconst Map = ({paths, stops})=> {\n    \n   \n    const [progress, setProgress] = useState(null);\n    const velocity = 27; // 100km per hour\n    let initialDate;\n    let interval = null;\n    const icon1 = {\n        url: \"https://images.vexels.com/media/users/3/154573/isolated/preview/bd08e000a449288c914d851cb9dae110-hatchback-car-top-view-silhouette-by-vexels.png\",\n        scaledSize: new window.google.maps.Size(40, 40),\n        anchor: new window.google.maps.Point(20, 20),\n        scale: 0.7,\n      };\n    \n    const center = parseInt(paths.length / 2 );\n    const centerPathLat = paths[center].lat;\n    const centerpathLng = paths[center + 5].lng;\n    \n    useEffect(() => {\n        calculatePath();\n\n        return () => {\n            console.log(\"CLEAR........\");\n            interval && window.clearInterval(interval);\n        }\n    }, [paths]);\n\n    const getDistance = () => {\n        // seconds between when the component loaded and now\n        const differentInTime = (new Date() - initialDate) / 1000; // pass to seconds\n        return differentInTime * velocity; // d = v*t -- thanks Newton!\n    };\n    \n    const moveObject = () => {\n        const distance = getDistance();\n        if (!distance) {\n          return;\n        }\n    \n        let progress = paths.filter(\n          (coordinates) => coordinates.distance < distance\n        );\n    \n        const nextLine = paths.find(\n          (coordinates) => coordinates.distance > distance\n        );\n    \n        \n        if (!nextLine) {\n          setProgress(progress)\n          window.clearInterval(interval);\n          console.log(\"Trip Completed!! Thank You !!\")\n          return; // it's the end!\n        }\n        const lastLine = progress[progress.length - 1];\n    \n        const lastLineLatLng = new window.google.maps.LatLng(\n          lastLine.lat,\n          lastLine.lng\n        );\n    \n        const nextLineLatLng = new window.google.maps.LatLng(\n          nextLine.lat,\n          nextLine.lng\n        );\n    \n        // distance of this line\n        const totalDistance = nextLine.distance - lastLine.distance;\n        const percentage = (distance - lastLine.distance) / totalDistance;\n    \n        const position = window.google.maps.geometry.spherical.interpolate(\n          lastLineLatLng,\n          nextLineLatLng,\n          percentage\n        );\n\n        mapUpdate();\n        setProgress(progress.concat(position))\n    };\n\n    const calculatePath = () => {\n        paths = paths.map((coordinates, i, array) => {\n          if (i === 0) {\n            return { ...coordinates, distance: 0 }; // it begins here!\n          }\n          const { lat: lat1, lng: lng1 } = coordinates;\n          const latLong1 = new window.google.maps.LatLng(lat1, lng1);\n    \n          const { lat: lat2, lng: lng2 } = array[0];\n          const latLong2 = new window.google.maps.LatLng(lat2, lng2);\n    \n          // in meters:\n          const distance = window.google.maps.geometry.spherical.computeDistanceBetween(\n            latLong1,\n            latLong2\n          );\n    \n          return { ...coordinates, distance };\n        });\n    };\n    \n    const startSimulation = useCallback(\n        () => {\n            if(interval) {\n                window.clearInterval(interval);\n            }\n            setProgress(null);\n            initialDate = new Date();\n            interval = window.setInterval(moveObject, 1000);\n        },\n        [interval, initialDate],\n    );\n\n    const mapUpdate = () => {\n        const distance = getDistance();\n        if (!distance) {\n            return;\n        }\n\n        let progress = paths.filter(\n            (coordinates) => coordinates.distance < distance\n        );\n\n        const nextLine = paths.find(\n            (coordinates) => coordinates.distance > distance\n        );\n\n        let point1, point2;\n\n        if (nextLine) {\n            point1 = progress[progress.length - 1];\n            point2 = nextLine;\n        } else {\n            // it's the end, so use the latest 2\n            point1 = progress[progress.length - 2];\n            point2 = progress[progress.length - 1];\n        }\n\n        const point1LatLng = new window.google.maps.LatLng(point1.lat, point1.lng);\n        const point2LatLng = new window.google.maps.LatLng(point2.lat, point2.lng);\n\n        const angle = window.google.maps.geometry.spherical.computeHeading(\n            point1LatLng,\n            point2LatLng\n        );\n        const actualAngle = angle - 90;\n\n        const marker = document.querySelector(`[src=\"${icon1.url}\"]`);\n\n        if (marker) {\n            // when it hasn't loaded, it's null\n            marker.style.transform = `rotate(${actualAngle}deg)`;\n        }\n    }\n    \n    return(\n      <Card variant=\"outlined\">\n        <div className='btnCont'>\n          <Button variant=\"contained\" onClick={startSimulation}>Start Simulation</Button>\n        </div>\n        \n        <div className='gMapCont'>\n          <GoogleMap\n              defaultZoom={17}\n              defaultCenter={{ lat: centerPathLat, lng: centerpathLng }}\n          >\n            <Polyline\n                path={paths}\n                options={{\n                strokeColor: \"#0088FF\",\n                strokeWeight: 6,\n                strokeOpacity: 0.6,\n                defaultVisible: true,\n                }}\n            />\n\n            {stops.data.map((stop, index) => (\n\n                <Marker\n                    key={index}\n                    position={{\n                        lat: stop.lat,\n                        lng: stop.lng\n                    }}\n                    title={stop.id}\n                    label={`${index + 1}`}\n                />\n            ))}\n\n            {progress && (\n                <>\n                <Polyline\n                    path={progress}\n                    options={{ strokeColor: \"orange\" }}\n                />\n\n                <Marker\n                    icon={icon1}\n                    position={progress[progress.length - 1]}\n                />\n                </>\n            )}\n          </GoogleMap>\n        </div>\n      </Card>  \n    )\n};\n\nexport default withScriptjs(\n  withGoogleMap(\n    Map\n  )\n)"]},"metadata":{},"sourceType":"module"}